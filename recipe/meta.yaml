{% set version = "0.7.1.851" %}
{% set lib_version = version.split(".")[0]+"."+version.split(".")[1]+"."+version.split(".")[2]+".0" %}
{% set platform = "linux-x86_64" %}  # [linux64]
{% set platform = "linux-sbsa" %}  # [aarch64]
{% set extension = "tar.xz" %}

{% set cuda_major = environ.get("cuda_compiler_version", "12.6").split(".")[0] %}
{% set soname = version.split(".")[0] %}

package:
  name: libcusolvermp-split
  version: {{ version }}

source:
  url: https://developer.download.nvidia.com/compute/cusolvermp/redist/libcusolvermp/{{ platform }}/libcusolvermp-{{ platform }}-{{ version }}_cuda{{ cuda_major }}-archive.{{ extension }}
  sha256: 82467eb3f6dd6f3af9d3cd9d12b67180dba00739697c4d74350caa7fd6267b04  # [linux64 and (cuda_compiler_version or "").startswith("12")]
  sha256: 43efaa7fd723fa963451204618e05f550fb987571a6ba21cc215324c972e8e2b  # [linux64 and (cuda_compiler_version or "").startswith("13")]
  sha256: e68789f12d5b9b4d3e9b947f0cc45566c897729d59e532223a4bec78466fba6c  # [aarch64 and (cuda_compiler_version or "").startswith("12")]
  sha256: 6ac090effa2199f4feefa5dae658b2cb3460c2d621992e9cb15b5d990d45753d  # [aarch64 and (cuda_compiler_version or "").startswith("13")]

build:
  number: 0
  skip: true  # [not (linux64 or aarch64)]
  skip: true  # [cuda_compiler_version in (None, "None") or (cuda_compiler_version or "").startswith("11")]
  script:
    - cp -rv include $PREFIX
    - cp -rv lib $PREFIX
    - check-glibc "$PREFIX"/lib*/*.so.* "$PREFIX"/bin/* "$PREFIX"/targets/*/lib*/*.so.* "$PREFIX"/targets/*/bin/*  # [linux]

requirements:
  build:
    - cf-nvidia-tools 1.*  # [linux]

outputs:
  - name: libcusolvermp{{ soname }}
    build:
      run_exports:
        - {{ pin_subpackage("libcusolvermp" ~ soname, exact=True) }}
      ignore_run_exports_from:
        - libcusolver-dev
        - cuda-cudart-dev
        - libcublas-dev
      ignore_run_exports:
        # Ignore `cuda-version` constraint as this supports CUDA Enhanced Compatibility.
        - cuda-version
    files:
      - lib/libcusolverMp.so.*
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - {{ stdlib("c") }}
      host:
        - cuda-version {{ cuda_compiler_version }}
        - libcusolver-dev
        - cuda-cudart-dev
        - libcublas-dev
        - nccl
      run:
        - {{ pin_compatible("cuda-version", min_pin="x", max_pin="x") }}
        - libcusolver
        - cuda-cudart
        - libcublas
        - nccl
    test:
      commands:
        - test -L $PREFIX/lib/libcusolverMp.so.{{ soname }}
        - test -f $PREFIX/lib/libcusolverMp.so.{{ lib_version }}

  - name: libcusolvermp-dev
    build:
      ignore_run_exports:
        - cuda-version
      run_exports:
        - {{ pin_subpackage("libcusolvermp" ~ soname, exact=True) }}
    files:
      - lib/libcusolverMp.so
      - include/cusolverMp.h
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - {{ stdlib("c") }}
      run:
        - {{ pin_subpackage("libcusolvermp" ~ soname, exact=True) }}
    test:
      commands:
        - test -f $PREFIX/include/cusolverMp.h
        - test -L $PREFIX/lib/libcusolverMp.so

about:
  home: https://docs.nvidia.com/cuda/cusolvermp/
  license: LicenseRef-NVIDIA-End-User-License-Agreement
  license_file: LICENSE
  license_url: https://docs.nvidia.com/cuda/cusolvermp/license/index.html
  summary: NVIDIA cuSOLVERMp is a high-performance, distributed-memory, GPU-accelerated library that provides tools for the solution of dense linear systems and eigenvalue problems.
  description: |
    NVIDIA cuSOLVERMp is a high-performance, distributed-memory, GPU-accelerated library that provides tools for the solution of dense linear systems and eigenvalue problems. 
    cuSOLVERMp is compatible with 2D block-cyclic data layout and provides ScaLAPACK-like C APIs.
    A companion library, CAL, contains utilities to manage communicators and to synchronize processes in a safe way.
  doc_url: https://docs.nvidia.com/cuda/cusolvermp/

extra:
  feedstock-name: libcusolvermp
  recipe-maintainers:
    - conda-forge/cuda
